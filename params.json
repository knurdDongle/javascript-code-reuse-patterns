{"name":"Javascript-code-reuse-patterns","tagline":"low level abstraction, module based, code reuse patterns (function based Traits, Mixins) intended for reflecting the basics before starting with more complex meta programming approaches.","body":"javascript-code-reuse-patterns\r\n==============================\r\n\r\n\r\nLow level abstraction, module based, code reuse patterns intended for reflecting the basics before starting with\r\nmore complex meta programming approaches.\r\n\r\n\r\nEvery now and again it happened and still does that JavaScript programming individuals each on their own discover\r\nthis languages capability for - what then mostly gets referred to as - \"functional or function based mixins\".\r\nMost of them understand in this very moment the impact of theirs discovery in means of working with a different\r\ndesign approach for theirs future project architectures and code bases (modularisation, code recycling, creating\r\ntypes, generating type/object systems). But how does it come?\r\n\r\nJavaScript is a delegation language. This languages core features are all about `Object` and `Function` and\r\n`closures` as much as about `call` and `apply` ... and yes about `prototype` too. Do value the last mentioned\r\nbut don't adore it blindly. Delegation in JavaScript already happens implicitly when the prototype chain is\r\nwalked in order to e.g. find a method that might be related to but is not directly owned by an object. Once the\r\nmethod was found it gets called within this objects context. Thus inheritance in JavaScript is covered by a\r\ndelegation automatism that is bound to the `prototype` slot of constructor functions.\r\n\r\nBut almost from its beginning JavaScript has been capable of delegating a function or a method directly to\r\nan object that has need of it via `call` or `apply`. Thus introducing an object composition pattern based on\r\nfunctional TRAIT/MIXIN modules. This knowledge then repeatedly drives articles/discussions -\r\n[also the most recent one](http://webreflection.blogspot.de/2013/04/flight-mixins-are-awesome.html)\r\nthat [right now already has aggregated into a project](https://github.com/WebReflection/object-mixin).\r\n\r\nBut before using such smart approaches it might be helpful to have a look into function based code reuse patterns\r\nthat do rely only on JavaScript's module pattern and therefore can be considered to be still free of any kind of\r\nmeta programming.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}